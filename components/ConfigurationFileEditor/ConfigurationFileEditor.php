<?php

/**
 * ConfigurationFileEditor - Class used to generate a form for editing configuration files
 *
 * @author perrin
 */
class ConfigurationFileEditor extends DotCoreObject {

	/**
	 * Constructor for ConfigurationFileEditor
	 * @param DotCoreConfiguration $configuration
	 */
	public function  __construct(
		DotCoreConfiguration $configuration,
		DotCoreMessages $messages,
		$postback_url = NULL) {
		self::$instances++;

		if($postback_url == NULL) {
			$postback_url = $_SERVER['REQUEST_URI'];
		}

		$this->messages = $messages;
		$this->configuration = $configuration;
		$this->generated_form = new DotCoreForm('configuration-editor-form-'.self::$instances, $postback_url);
	}

	/**
	 * Holds the configuration object used to generate the form
	 * @var DotCoreConfiguration
	 */
	private $configuration = NULL;

	/**
	 * Holds the form generated by this editor
	 * @var DotCoreForm
	 */
	private $generated_form = NULL;

	/**
	 * Holds the messages used to generate the labels and other stuff of the form
	 * @var DotCoreMessages
	 */
	private $messages = NULL;

	/**
	 * Holds a list of the custom elements used to generate the form.
	 * @var array
	 */
	private $custom_elements = array();

	private static $instances = 0;

	const LABEL = 'LabelConfiguration';
	const DESCRIPTION = 'DescriptionConfiguration';

	/*
	 *
	 * Accessors:
	 *
	 */

	/**
	 *
	 * @return DotCoreConfiguration
	 */
	public function getConfiguration() {
		return $this->configuration;
	}

	/**
	 *
	 * @param DotCoreConfiguration $configuration
	 * @return ConfigurationFileEditor
	 */
	public function setConfiguration(DotCoreConfiguration $configuration) {
		$this->configuration = $configuration;
		return $this;
	}

	/**
	 *
	 * @return DotCoreForm
	 */
	public function getGeneratedForm() {
		return $this->generated_form;
	}

	/**
	 *
	 * @param DotCoreForm $form
	 * @return ConfigurationFileEditor
	 */
	public function setGeneratedForm(DotCoreForm $form) {
		$this->generated_form = $form;
		return $this;
	}

	/**
	 * 
	 * @param string $config_key
	 * @param DotCoreInputFormElement $element
	 *
	 * @return ConfigurationFileEditor
	 */
	public function AddCustomElement($config_key, DotCoreInputFormElement $element) {
		$this->custom_elements[$config_key] = $element;
		return $this;
	}

	/**
	 * 
	 * @param string $config_key
	 * @return ConfigurationFileEditor
	 */
	public function RemoveCustomElement($config_key) {
		unset($this->custom_elements[$config_key]);
		return $this;
	}

	/*
	 *
	 * Methods:
	 *
	 */

	/**
	 * Generates a form that can be used to edit the messages stored in this object
	 * @return DotCoreForm
	 */
	public function GenerateForm()
	{
		$messages = $this->messages;
		$form = $this->generated_form;
		$languages = DotCoreLanguageBLL::GetAllLanguages();
		$count_languages = count($languages);

		$config_items = $this->configuration->GetFields();
		foreach($config_items as $field_name => $field)
		{
			if($field->GetAttribute('editable')) {
				$custom_element = $this->custom_elements[$field_name];
				$default_val = $field->GetValue();
				$element_name = $this->GenerateUniqueFormElementID($field_name);
				if($custom_element == NULL)
				{
					switch($field->GetType()) {

						case 'int':
							$element = new DotCoreTextFormElement($element_name);
							$this->AddFormElement($field_name, $messages[self::LABEL.$field_name], $default_val, $messages, $element, $form);
							break;
						case 'rich_string':
							if(!$field->GetAttribute('multilang')) {
								$element = new DotCoreRichTextFormElement($element_name);
								$this->AddFormElement($field_name, $messages[self::LABEL.$field_name], $default_val, $messages, $element, $form);
							}
							else {
								for($i = 0; $i < $count_languages; $i++) {
									$lang_code = $languages[$i]->getLanguageCode();
									$element = new DotCoreRichTextFormElement(
										$this->GenerateUniqueMultilangFormElementID(
											$element_name,
											$lang_code
										)
									);
									$this->AddFormElement(
										$field_name.'-'.$lang_code,
										str_replace('[lang]', $messages[$lang_code], $messages[self::LABEL.$field_name]),
										$default_val[$lang_code],
										$messages,
										$element,
										$form);
								}
							}
							break;
						case 'string': // Default case, let it slide then
						default:
							if(!$field->GetAttribute('multilang')) {
								if(!$field->GetAttribute('multiline')) {
									$element = new DotCoreTextFormElement($element_name);
								}
								else {
									$element = new DotCoreMultilineTextFormElement($element_name);
								}
								$this->AddFormElement($field_name, $messages[self::LABEL.$field_name], $default_val, $messages, $element, $form);
							}
							else {
								for($i = 0; $i < $count_languages; $i++) {
									$lang_code = $languages[$i]->getLanguageCode();
									if(!$field->GetAttribute('multiline')) {
										$element = new DotCoreTextFormElement($element_name.'-'.$lang_code);
									}
									else {
										$element = new DotCoreMultilineTextFormElement($element_name.'-'.$lang_code);
									}
									$this->AddFormElement(
										$field_name.'-'.$lang_code,
										str_replace('[lang]', $messages[$lang_code], $messages[self::LABEL.$field_name]),
										$default_val[$lang_code],
										$messages,
										$element,
										$form);
								}
							}
							break;
					}
				}
				else
				{
					$custom_element->SetDefaultValue($default_val);
					$form->AddFormElement($custom_element, $messages[self::LABEL . $field_name]);
				}
			}
		}

		$form->AddFormElement(new DotCoreSubmitFormElement('submit-config-form-'.self::$instances, $messages['LabelUpdate']));
		return $form;
	}

	protected function AddFormElement($messages_key, $label, $default_value, $messages, $element, $form) {
		$element->SetDefaultValue($default_value);
		$desc = $messages[self::DESCRIPTION . $messages_key];
		if(!empty($desc))
		{
			$element->SetExplanation($desc);
		}
		$form->AddFormElement($element, $label);
	}

	protected function GenerateUniqueFormElementID($key)
	{
		return 'configuration-'.$key.'-'.self::$instances;
	}

	protected function GenerateUniqueMultilangFormElementID($base_id, $lang_code) {
		return $base_id . '-' . $lang_code;
	}

	/**
	 * Processes the input from the generated form, and saves the changes to the messages
	 * @return boolean TRUE on success, FALSE on failure
	 */
	public function ProcessForm()
	{
		$config_fields = $this->configuration->GetFields();
		$languages = DotCoreLanguageBLL::GetAllLanguages();
		$count_languages = count($languages);
		foreach($config_fields as $field_name => $field)
		{
			if($field->GetAttribute('editable')) {
				$custom_element = $this->custom_elements[$field_name];
				if($custom_element == NULL)
				{
					$element_name = $this->GenerateUniqueFormElementID($field_name);
					if(!$field->GetAttribute('multilang')) {
						$element = $this->generated_form->GetFormElement($element_name);
						$field->SetValue($element->GetValue());
					}
					else {
						$multilang_val = array();
						for($i = 0; $i < $count_languages; $i++) {
							$lang_code = $languages[$i]->getLanguageCode();
							$element = $this->generated_form->GetFormElement(
								$this->GenerateUniqueMultilangFormElementID(
									$element_name,
									$lang_code
								)
							);
							$multilang_val[$lang_code] = $element->GetValue();
						}
						$field->SetValue($multilang_val);
					}
				}
				else
				{
					$field->SetValue($custom_element->GetValue());
				}
			}
		}

		$this->configuration->SaveChanges();
		return TRUE;
	}

}
?>
