<?php

/**
 * MessagesFileEditor - Class used to generate a form for editing of message files
 *
 * @author perrin
 */
class MessagesFileEditor extends DotCoreObject {

    /**
     * Constructor for MessagesFileEditor
     * @param DotCoreMessages $messages
     */
    public function  __construct(DotCoreMessages $messages, $postback_url = NULL) {
        self::$instances++;

        if($postback_url == NULL) {
            $postback_url = $_SERVER['REQUEST_URI'];
        }

        $this->messages = $messages;
        $this->generated_form = new DotCoreForm('messages-editor-form-'.self::$instances, $postback_url);
    }

    /**
     * Holds the messages used to generate the form
     * @var DotCoreMessages
     */
    private $messages = NULL;

    /**
     * Holds the form generated by this editor
     * @var DotCoreForm
     */
    private $generated_form = NULL;

    private static $instances = 0;

    /*
     *
     * Accessors:
     *
     */

    /**
     *
     * @return DotCoreMessages
     */
    public function getMessages() {
        return $this->messages;
    }

    /**
     *
     * @param DotCoreMessages $messages
     * @return MessagesFileEditor
     */
    public function setMessages(DotCoreMessages $messages) {
        $this->messages = $messages;
        return $this;
    }

    /**
     *
     * @return DotCoreForm
     */
    public function getGeneratedForm() {
        return $this->generated_form;
    }

    /**
     *
     * @param DotCoreForm $form
     * @return MessagesFileEditor
     */
    public function setGeneratedForm(DotCoreForm $form) {
        $this->generated_form = $form;
        return $this;
    }

    /*
     *
     * Methods:
     *
     */

    /**
     * Generates a form that can be used to edit the messages stored in this object
     * @return DotCoreForm
     */
    public function GenerateForm()
    {
        $languages = DotCoreLanguageBLL::GetAllLanguages();
        $count_languages = count($languages);
        $is_multilang = $count_languages > 1;

        $os = DotCoreOS::GetInstance();
        $this->messages->setLabelsLanguages(
            array(
                $os->GetLanguage()->getLanguageCode()
            )
        );
        $os_messages = $os->GetMessages();

        $keys = $this->messages->GetMessagesKeys();
        $count_keys = count($keys);

        $this->generated_form->InsertMarkup('<div id="messages-editor-wrapper">');
        for($i = 0; $i < $count_languages; $i++) {
            $language = $languages[$i];
            $language_code = $language->getLanguageCode();

            if($is_multilang) {
                $this->generated_form->InsertMarkup('
                    <div class="x-hide-display" id="messages-'.$language_code.'">
                ');
            }

            for($j = 0; $j < $count_keys; $j++) {
                $key = $keys[$j];
                $tmp_form_item = new DotCoreTextFormElement($this->GenerateUniqueFormElementID($key, $language_code));
                $tmp_form_item->SetDefaultValue($this->messages->GetMessageByLanguage($key, $language_code));
                $this->generated_form->AddFormElement($tmp_form_item, $this->messages->GetLabel($key));
            }

            $this->generated_form->AddFormElement(
                    new DotCoreSubmitFormElement(
                        'messages-submit-'.$language_code,
                        $os_messages['LabelUpdate']
                    )
                );

            if($is_multilang) {
                $this->generated_form->InsertMarkup('
                    </div>
                ');
            }
        }
        $this->generated_form->InsertMarkup('</div>');
        
        return $this->generated_form;
    }

    protected function GenerateUniqueFormElementID($key, $language_code)
    {
        return 'message-'.$key.'-'.$language_code;
    }

    /**
     * Processes the input from the generated form, and saves the changes to the messages
     * @return boolean TRUE on success, FALSE on failure
     */
    public function ProcessForm()
    {
        $languages = DotCoreLanguageBLL::GetAllLanguages();
        $count_languages = count($languages);
        $keys = $this->messages->GetMessagesKeys();
        $count_keys = count($keys);

        for($i = 0; $i < $count_languages; $i++) {
            $language = $languages[$i];
            $language_code = $language->getLanguageCode();

            for($j = 0; $j < $count_keys; $j++) {
                $key = $keys[$j];
                $new_val = $this->generated_form->GetFormElement($this->GenerateUniqueFormElementID($key, $language_code))->GetValue();
                $this->messages->SetMessage($key, $language_code, $new_val);
            }
        }

        return $this->messages->SaveToFile();
    }

}
?>
