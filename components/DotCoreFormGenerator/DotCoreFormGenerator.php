<?php

/**
 * DotCoreFormGenerator - Generates an HTML Form from a given DAL
 *
 * @author perrin
 */
class DotCoreFormGenerator extends DotCoreObject {

	/**
	 * Constructor for Form Generator
	 * @param string $form_name - The name of the generated form
	 * @param string $form_action - The action of the form (i.e., the page to which it is submitted)
	 * @param string $form_method
	 */
	public function  __construct($form_name, $form_action, $form_method = DotCoreForm::FORM_METHOD_POST) {
		$this->form = new DotCoreForm($form_name, $form_action, $form_method);
	}

	/**
	 * Holds the form generated by this Form Generator
	 * @var DotCoreForm
	 */
	private $form = NULL;

	/**
	 * Holds the class that overrides the class or rich elements
	 * @var string
	 */
	private $rich_element_class = NULL;

	/**
	 * Stores the messages used to generate forms
	 * @var DotCoreMessages
	 */
	private $messages = NULL;

	/**
	 * Holds the record being used by the generator
	 * @var DotCoreDataRecord
	 */
	private $record = NULL;

	/**
	 * Holds the fields used by this generator to generate or process the generated form
	 * @var array
	 */
	private $fields = NULL;

	/**
	 * Holds a map between fields and the dictionary which represents the available values for those fields
	 * @var array
	 */
	private $multichoice = array();

	/**
	 * Holds a map between unique key names and the field which they represent
	 * @var array
	 */
	private $unique_keys = array();

	/**
	 * Holds a dictionary of elements to use in the generated form, instead of generating an element by the standard rules
	 * @var array
	 */
	private $custom_elements = array();

	const MESSAGE_LABEL = '_label';
	const MESSAGE_VALIDATION_LABEL = '_validation_label';
	const MESSAGE_EXPLANATION = '_explanation';

	const MESSAGE_EMPTY_EXCEPTION = 'EmptyRequiredFieldException';
	const MESSAGE_PASSWORD_VALIDATION_EXCEPTION = 'PasswordsNotMatchingException';
	const MESSAGE_INT_PARSE_EXCEPTION = 'IntParseException';
	const MESSAGE_UNIQUE_KEY_EXCEPTION = 'UniqueKeyException';
	const MESSAGE_NOT_FILLED_EXCEPTION = 'NotReadyForInsertionException';
	const MESSAGE_INVALID_EXTENSION_EXCEPTION = 'InvalidFileTypeException';
	const MESSAGE_INVALID_EMAIL_EXCEPTION = 'InvalidEmailException';
	const MESSAGE_INVALID_URL_EXCEPTION = 'InvalidURLException';
	const MESSAGE_INVALID_DATETIME_EXCEPTION = 'InvalidDateTimeException';
	const MESSAGE_INVALID_RECURSIVE_FIELD_EXCEPTION = 'InvalidRecursiveFieldException';
	const MESSAGE_CHILD_IS_OWN_PARENT_EXCEPTION = 'ChildIsOwnParentRecursiveException';
	const MESSAGE_MAXIMUM_FILE_SIZE_EXCEPTION = 'MaxmimumFileSizeException';
	const MESSAGE_FILE_UPLOAD_EXCEPTION = 'FileUploadException';

	const NAME_SUBMIT = '_submit';
	const NAME_VALIDATION = '_validation';

	/*
	 *
	 * Accessors:
	 *
	 */

	/**
	 * Gets the form generated by this generator
	 * @return DotCoreForm
	 */
	public function &GetForm() {
		return $this->form;
	}

	/**
	 * Gets the class that gets set on rich form elements
	 * @return string
	 */
	public function GetRichElementClass() {
		return $this->rich_element_class;
	}

	/**
	 *
	 * @param string $class
	 * @return DotCoreFormGenerator
	 */
	public function SetRichElementClass($class) {
		$this->rich_element_class = $class;
		return $this;
	}

	/**
	 *
	 * @return DotCoreDataRecord
	 */
	public function GetRecord() {
		return $this->record;
	}

	/**
	 *
	 * @param DotCoreDataRecord $record
	 * @return DotCoreFormGenerator
	 */
	public function SetRecord(DotCoreDataRecord $record) {
		$this->record = $record;
		return $this;
	}

	/**
	 *
	 * @return DotCoreMessages
	 */
	public function GetMessages() {
		if($this->messages == NULL) {
			$this->messages = new DotCoreMessages();
		}
		return $this->messages;
	}

	/**
	 *
	 * @param DotCoreMessages $messages
	 * @return DotCoreFormGenerator
	 */
	public function SetMessages(DotCoreMessages $messages) {
		$this->messages = $messages;
		return $this;
	}

	/**
	 * Gets the fields used by the generator to generate, process and validate the generated form
	 * @return array
	 */
	public function GetFields() {
		return $this->fields;
	}

	/**
	 * Sets the fields used by the generator to generate, process and validate the generated form
	 * @param array $fields
	 *
	 * @return DotCoreFormGenerator
	 */
	public function SetFields(array $fields) {
		$this->fields = $fields;
		return $this;
	}

	/**
	 * Sets the choices for the field represented by $field_name
	 * @param string $field_name
	 * @param array $choices
	 *
	 * @return DotCoreFormGenerator
	 */
	public function SetFieldChoices($field_name, array $choices) {
		$this->multichoice[$field_name] = $choices;
		return $this;
	}

	/**
	 *
	 * @param string $field_name
	 * @return DotCoreFormGenerator
	 */
	public function UnsetFieldChoices($field_name) {
		unset($this->multichoice[$field_name]);
		return $this;
	}

	/**
	 * Gets the choices of the fields set in this generator
	 * @return array
	 */
	public function GetFieldsChoices() {
		return $this->multichoice;
	}

	/**
	 * Adds a mapping between a unique key and a field (used for setting errors in the right places, for example)
	 * @param string $unique_key_name
	 * @param IDotCoreDALField $field
	 * @return DotCoreFormGenerator
	 */
	public function AddUniqueKeyFieldMapping($unique_key_name, IDotCoreDALField $field) {
		$this->unique_keys[$unique_key_name] = $field;
		return $this;
	}

	/**
	 * Removes a mapping between a unique key and a field (used for setting errors in the right places, for example)
	 * @param string $unique_key_name
	 * @return DotCoreFormGenerator
	 */
	public function RemoveUniqueKeyFieldMapping($unique_key_name) {
		unset($this->unique_keys[$unique_key_name]);
		return $this;
	}

	/**
	 * Sets a custom element to be used when generating the element for the field with name $field_name
	 * @param string $field_name
	 * @param DotCoreFormElement $element
	 * @return DotCoreFormGenerator
	 */
	public function SetCustomFormElement($field_name, DotCoreFormElement $element) {
		$this->custom_elements[$field_name] = $element;
		return $this;
	}

	/**
	 * Removes a custom element to be used when generating the element for the field with name $field_name
	 * @param string $field_name
	 * @return DotCoreFormGenerator
	 */
	public function RemoveCustomFormElement($field_name) {
		unset($this->custom_elements[$field_name]);
		return $this;
	}

	/**
	 * Gets the custom elements used by this generator
	 * @return array
	 */
	public function GetCustomFormElements() {
		return $this->custom_elements;
	}

	/**
	 * Generates a form for $record, while taking into account the hints passed in $hints
	 * @param DotCoreDataRecord $record
	 * @param array $messages - The messages used for the labels and errors of
	 */
	public function Generate() {
		foreach($this->fields as $field)
		{
			$this->AddFieldFormElement($field);
		}
	}

	public function GenerateSubmitButton($label) {
		$submit_element = new DotCoreSubmitFormElement($this->form->GetFormName() . self::NAME_SUBMIT, $label);
		$this->form->AddFormElement($submit_element);
	}

	public function GetUniqueElementName(DotCoreDataRecord $record, IDotCoreDALField $field) {
		return $field->GetFieldName() . $record->GetUniqueCode();
	}

	/**
	 * Gets a form field element that can be used to edit the value of IDotCoreDALField $field
	 * @param IDotCoreDALField $field
	 * @param DotCoreMessages $messages
	 * @param array $hints
	 * @return DotCoreInputFormElement
	 */
	protected function AddFieldFormElement(IDotCoreDALField $field) {
		
		$record = $this->record;
		$messages = $this->GetMessages();
		$field_name = $field->GetFieldName();
		$element_name = $this->GetUniqueElementName($record, $field);

		if($field instanceof IDotCoreDALLinkedField){
			$record = $field->GetLinkedRecord($record);
			$field = $field->getEntity();
		}

		if(isset($this->custom_elements[$field_name])) {
			$element = $this->custom_elements[$field_name];
			if($field->IsFieldLoaded($record))
			{
				$element->SetDefaultValue($field->GetValue($record));
			}
			$this->form->AddFormElement
			(
				$element,
				$messages[$field->GetFieldName().self::MESSAGE_LABEL]
			);
		}
		elseif(isset($this->multichoice[$field_name])) {
			$multichoice_dictionary = $this->multichoice[$field_name];
			$element = new DotCoreComboBoxFormElement($element_name, $multichoice_dictionary);
			if($field->IsFieldLoaded($record))
			{
				$element->SetDefaultValue($field->GetValue($record));
			}

			$this->form->AddFormElement
			(
				$element,
				$messages[$field->GetFieldName().self::MESSAGE_LABEL]
			);
		}
		else
		{
			// Int Fields:
			if($field instanceof DotCoreAutoIncrementingKey) {
				$element = NULL; // No editing field for autoincrementing keys
			}
			elseif($field instanceof DotCoreTimestampField) {
				$element = new DotCoreDateTimeFormElement($element_name);
				if($field->IsFieldLoaded($record))
				{
					$element->SetDefaultTimestampValue($field->GetValue($record));
				}

				$this->form->AddFormElement
				(
					$element,
					$messages[$field->GetFieldName().self::MESSAGE_LABEL]
				);
			}
			elseif($field instanceof DotCoreIntField) {
				$element = new DotCoreTextFormElement($element_name);
				if($field->IsFieldLoaded($record))
				{
					$element->SetDefaultValue($field->GetValue($record));
				}

				$this->form->AddFormElement
				(
					$element,
					$messages[$field->GetFieldName().self::MESSAGE_LABEL]
				);
			}

			// String Fields
			elseif($field instanceof DotCoreImageField) {
				$element = new DotCoreUploadFormElement(
					$element_name,
					$field->getDestinationFolder($record));
				if($field->IsFieldLoaded($record))
				{
					$element->SetDefaultValue($field->GetValue($record));
				}
				$this->form->SetSupportsUpload(TRUE);

				$this->form->AddFormElement
				(
					$element,
					$messages[$field->GetFieldName().self::MESSAGE_LABEL]
				);
			}
			elseif($field instanceof DotCorePasswordField) {
				$password_element = new DotCorePasswordFormElement($element_name);

				$validation_element =
					new DotCorePasswordConfirmationFormElement(
						$element_name.self::NAME_VALIDATION,
						$password_element);

				$this->form->AddFormElement(
					$password_element,
					$messages[$field->GetFieldName().self::MESSAGE_LABEL]);

				$this->form->AddFormElement(
					$validation_element,
					$messages[$field->GetFieldName().self::MESSAGE_VALIDATION_LABEL]);

			}
			elseif($field instanceof DotCoreHTMLStringField) {
				$element = new DotCoreRichTextFormElement($element_name);
				if($this->rich_element_class != NULL) {
					$element->SetRichEditorClass($this->rich_element_class);
				}
				if($field->IsFieldLoaded($record))
				{
					$element->SetDefaultValue($field->GetValue($record));
				}
				$this->form->AddFormElement
				(
					$element,
					$messages[$field->GetFieldName().self::MESSAGE_LABEL]
				);
			}
			elseif($field instanceof DotCoreMultilineStringField) {
				$element = new DotCoreMultilineTextFormElement($element_name);
				if($field->IsFieldLoaded($record))
				{
					$element->SetDefaultValue($field->GetValue($record));
				}
				$this->form->AddFormElement
				(
					$element,
					$messages[$field->GetFieldName().self::MESSAGE_LABEL]
				);
			}
			elseif($field instanceof DotCoreURLField) {
				$element = new DotCoreUrlFormElement($element_name);
				if($field->IsFieldLoaded($record))
				{
					$element->SetDefaultValue($field->GetValue($record));
				}
				$this->form->AddFormElement
				(
					$element,
					$messages[$field->GetFieldName().self::MESSAGE_LABEL]
				);
			}
			elseif($field instanceof DotCoreEmailField) {
				$element = new DotCoreTextFormElement($element_name);
				$element->AddClass('email-field');
				if($field->IsFieldLoaded($record))
				{
					$element->SetDefaultValue($field->GetValue($record));
				}
				$this->form->AddFormElement
				(
					$element,
					$messages[$field->GetFieldName().self::MESSAGE_LABEL]
				);
			}
			elseif($field instanceof DotCorePlainStringField) {
				// Emails have nothing special, so treat them here
				$element = new DotCoreTextFormElement($element_name);
				if($field->IsFieldLoaded($record))
				{
					$element->SetDefaultValue($field->GetValue($record));
				}
				$this->form->AddFormElement
				(
					$element,
					$messages[$field->GetFieldName().self::MESSAGE_LABEL]
				);
			}

			// Date Fields
			elseif($field instanceof DotCoreDateTimeField) {
				$element = new DotCoreDateTimeFormElement($element_name);
				if($field->IsFieldLoaded($record))
				{
					$element->SetDefaultValue($field->GetValue($record));
				}
				$this->form->AddFormElement
				(
					$element,
					$messages[$field->GetFieldName().self::MESSAGE_LABEL]
				);
			}
			elseif($field instanceof DotCoreDateField) {
				$element = new DotCoreDateFormElement($element_name);
				if($field->IsFieldLoaded($record))
				{
					$element->SetDefaultValue($field->GetValue($record));
				}
				$this->form->AddFormElement
				(
					$element,
					$messages[$field->GetFieldName().self::MESSAGE_LABEL]
				);
			}

			// Boolean Fields
			elseif($field instanceof DotCoreBooleanField) {
				$element = new DotCoreCheckBoxFormElement($element_name);
				if($field->IsFieldLoaded($record))
				{
					$element->SetDefaultValue($field->GetValue($record));
				}
				$this->form->AddFormElement
				(
					$element,
					$messages[$field->GetFieldName().self::MESSAGE_LABEL]
				);
			}

			// Default
			else {
				$element = new DotCoreTextFormElement($element_name);
				if($field->IsFieldLoaded($record))
				{
					$element->SetDefaultValue($field->GetValue($record));
				}
				$this->form->AddFormElement
				(
					$element,
					$messages[$field->GetFieldName().self::MESSAGE_LABEL]
				);
			}
		}

		$explanation_element_key = $field->GetFieldName() . self::MESSAGE_EXPLANATION;
		if($messages->offsetExists($explanation_element_key))
		{
			$this->form->InsertMarkup('<div class="explanation">'.$messages[$explanation_element_key].'</div>');
		}

		return $element;
	}

	/**
	 * Processes the input from a form generated by this generator for the DotCoreDataRecord $record
	 * @return boolean TRUE on successful process, FALSE otherwise
	 */
	public function ProcessForm() {

		$record = $this->record;
		foreach($this->fields as $field)
		{
			if($field instanceof IDotCoreDALLinkedField){
				$current_record = $field->GetLinkedRecord($record);
				$field = $field->getEntity();
			}
			else {
				$current_record = $record;
			}

			$form_element_name = $this->GetUniqueElementName($current_record, $field);
			$form_element = $this->form->GetFormElement($form_element_name);

			if($form_element != NULL)
			{
				$field_name = $field->GetFieldName();
				$value = $form_element->GetValue();

				// Int Fields:
				if($field instanceof DotCoreTimestampField) {
					// If the value is empty, no date was passed, so don't try to parse it
					// If an empty date is invalid, an empty exception will be thrown
					if(!empty($value))
					{
						try {
							$timestamp = DotCoreDateTime::DateTimeStringToTimestamp($value);
						}
						catch(InvalidDateTimeException $ex) {
							$this->form->AddError(
								$this->GetError(
									$field_name.self::MESSAGE_INVALID_DATETIME_EXCEPTION,
									$ex->getMessage()),
								$form_element_name
							);
						}
					}
					else {
						$timestamp = NULL;
					}

					if(!$this->form->HasError($form_element_name)) {
						try {
							$field->SetValue($current_record, $timestamp);
						}
						catch(Exception $ex) {
							$this->form->AddError(
								$this->GetError(
									$field_name.get_class($ex),
									$ex->getMessage()),
								$form_element_name
							);
						}
					}
				}
				// String Fields
				elseif($field instanceof DotCoreImageField) {
					// If the new value is not empty, then we will try using it no matter what
					// The reason is because with file fields you can't have default values
					// If the record is we try it whatever the value is (empty or not) because we must validate it
					if(!$field->IsEmpty($value) || $current_record->IsEmpty())
					{
						try {
							$field->SetValue($current_record, $value);
						}
						catch(Exception $ex) {
							$this->form->AddError(
								$this->GetError(
									$field_name.get_class($ex),
									$ex->getMessage()),
								$form_element_name
							);
						}
					}
				}
				elseif($field instanceof DotCorePasswordField) {
					// Check only if the record is empty - and then we know it needs a password
					// Or if a password was sent, then we will take care of it
					if($current_record->IsEmpty() || !$field->IsEmpty($value))
					{
						// Before checking the validity of the password, check the validator
						$password_validator = $this->form->GetFormElement($form_element_name.self::NAME_VALIDATION);
						if($password_validator->IsValid())
						{
							try {
								$field->SetValue($current_record, $value);
							}
							catch(Exception $ex) {
								$this->form->AddError(
									$this->GetError(
										$field_name.get_class($ex),
										$ex->getMessage()),
									$form_element_name
								);
							}
						}
						else {
							$this->form->AddError(
								$this->GetError(
									$field_name.self::MESSAGE_PASSWORD_VALIDATION_EXCEPTION,
									'InvalidPasswordException'),
								$form_element_name
							);
						}
					}
				}
				// Default
				else {
					
					try {
						$field->SetValue($current_record, $value);
					}
					catch(Exception $ex) {
						$this->form->AddError(
							$this->GetError(
								$field_name.get_class($ex),
								$ex->getMessage()),
							$form_element_name
						);
					}
				}
			}
		}

		return (!$this->form->HasErrors());
	}

	public function Validate() {
		$record = $this->record;
		try
		{
			$record->GetDAL()->ValidateRecord($record);
		}
		catch(UniqueKeyException $ex) {

			$invalid_keys = $ex->GetKeys();
			foreach($invalid_keys as $key=>$fields)
			{
				$error = $this
					->GetError
					(
						$key . self::MESSAGE_UNIQUE_KEY_EXCEPTION,
						$key . ' must be unique.'
					);

				if(count($fields) == 1)
				{
					$field = $fields[0];
					$form_element = $this->form->GetFormElement($this->GetUniqueElementName($record, $field));
					$this->form->AddError(
						$error,
						$form_element->GetName()
					);
				}
				else
				{
					if(isset($this->unique_keys[$key]))
					{
						// In the hints they told us to what field to map this key's unique error
						$field = $this->unique_keys[$key];
						$this->form->AddError(
							$error,
							$this->GetUniqueElementName($record, $field)
						);
					}
					else
					{
						$this->form->AddError($error);
					}
				}
			}
		}
		catch(Exception $ex)
		{
			$form->AddError($ex->getMessage());
		}
	}

	public function TrySave(DotCoreBLL $bll) {
		$messages = $this->GetMessages();
		$result = FALSE;
		try
		{
			$bll->Save($this->record);
			$result = TRUE;
		}
		catch(NotReadyForInsertionException $ex) {
			// If it's not ready for insertion, the end user doesn't really need to know, actually. It's a programmer's error
			// So, show a message only if passed
			$key = $bll->GetDAL()->GetName() . self::MESSAGE_NOT_FILLED_EXCEPTION;
			$this->form->AddError(
				$this->GetError(
					$key,
					$ex->getMessage()
				)
			);
		}
		catch(MySqlException $ex) {die($ex->getQuery());
			$this->form->AddError($ex->getQuery());
		}
		catch(Exception $ex)
		{
			$this->form->AddError($ex->getMessage());
		}

		return $result;
	}

	public function HasErrors() {
		return $this->form->HasErrors();
	}

	public function GetError($key, $default)
	{
		$messages = $this->GetMessages();
		if($messages->offsetExists($key))
		{
			return $messages[$key];
		}
		else
		{
			return $default;
		}
	}
}
?>
